# create empty data frames to store the results
acf_results <- data.frame(matrix(ncol = ncol(rates)-1, nrow = 0))
pacf_results <- data.frame(matrix(ncol = ncol(rates)-1, nrow = 0))
# loop through each column of the rates data frame
for (i in names(rates)[-1]) {
acf_res <- acf(rates[[i]], na.action = na.pass, main = paste("ACF for", i))
pacf_res <- pacf(rates[[i]], na.action = na.pass, main = paste("PACF for", i))
# add the results to the data frames
acf_results <- rbind(acf_results, acf_res$acf)
pacf_results <- rbind(pacf_results, pacf_res$acf)
}
View(pacf_results)
# set the column names of the data frames
colnames(acf_results) <- names(rates)[-1]
colnames(pacf_results) <- names(rates)[-1]
# Upload data -------------------------------------------------------------
rates <- read.csv("/Users/tophcottle/Documents/Personal/mfx_products/daily_fx.csv")
# ARIMA models ------------------------------------------------------------
# create empty data frames to store the results
acf_results <- data.frame(matrix(ncol = ncol(rates)-1, nrow = 0))
pacf_results <- data.frame(matrix(ncol = ncol(rates)-1, nrow = 0))
View(pacf_results)
# loop through each column of the rates data frame
for (i in names(rates)[-1]) {
acf_res <- acf(rates[[i]], na.action = na.pass, main = paste("ACF for", i))
pacf_res <- pacf(rates[[i]], na.action = na.pass, main = paste("PACF for", i))
# add the results to the data frames
acf_results <- rbind(acf_results, acf_res$acf)
pacf_results <- rbind(pacf_results, pacf_res$acf)
}
# set the column names of the data frames
colnames(acf_results) <- names(rates)[-1]
colnames(pacf_results) <- names(rates)[-1]
View(pacf_results)
# Load libraries and API --------------------------------------------------
rm(list = ls())
library(tidyverse)
library(httr)
library(jsonlite)
library(dplyr)
library(lubridate)
library(blastula)
# Upload and clean data ---------------------------------------------------
today_date <- Sys.Date()
wd <- "Documents/Personal/mfx_products"
setwd(wd)
rm(list = ls())
library(tidyverse)
library(httr)
library(jsonlite)
library(dplyr)
library(lubridate)
library(blastula)
# Upload and clean data ---------------------------------------------------
today_date <- Sys.Date()
symbols <- read.csv("currency_symbols.csv")
symbol_string <- paste(symbols$code, collapse = ",")
symbol_string_encoded <- URLencode(symbol_string)
eururl <- paste0('https://api.exchangerate.host/latest?&base=EUR&amount=1&source=ecb&symbols=', symbol_string_encoded)
usdurl <- paste0('https://api.exchangerate.host/latest?&base=USD&amount=1&source=ecb&symbols=', symbol_string_encoded)
eurdata <- as.data.frame(fromJSON(eururl))
usddata <- as.data.frame(fromJSON(usdurl))
# Create a list of the two data frames
df_list <- list(usddata, eurdata)
combined_df <- data.frame()
# Create a for loop that will iterate over each data frame in the list
for (i in seq_along(df_list)) {
# Step 1: Delete columns
df_list[[i]] <- df_list[[i]] %>%
select(-motd.msg, -motd.url, -success)
# Step 2: Substring column names
colnames(df_list[[i]]) <- substr(colnames(df_list[[i]]), nchar(colnames(df_list[[i]]))-2, nchar(colnames(df_list[[i]])))
# Step 3: Add prefix to column names
if (i == 1) {
colnames(df_list[[i]]) <- paste0("USD_", colnames(df_list[[i]]))
} else {
colnames(df_list[[i]]) <- paste0("EUR_", colnames(df_list[[i]]))
}
}
# Step 4: Combine data frames into a single row and add to the existing database
daily_rates <- bind_cols(df_list) %>%
select(-USD_ase, -EUR_ase, -EUR_ate, -USD_USD, -EUR_EUR)%>%
rename(date = USD_ate)
rates <- read.csv("/Users/tophcottle/Documents/Personal/mfx_products/daily_fx.csv")
if (all(rates$date != daily_rates$date)) {
daily_rates <- bind_rows(rates, daily_rates)%>%
fill(everything()) %>%
mutate(date = as.Date(date)) %>%
filter(weekdays(date) != "Saturday" & weekdays(date) != "Sunday")%>%
arrange(desc(date))
}
# Calculate changes in FX rates -------------------------------------------
# create a new data frame for changes
changed <- data.frame(matrix(nrow=6, ncol=60))
colnames(changed) <- colnames(daily_rates[,-1])
calc_change <- daily_rates[,-1]
# calculate percent change for each column and assign it to the row of the changed data frame
for (i in 1:ncol(calc_change)) {
changed[1,i] <- ((calc_change[nrow(calc_change), i] - calc_change[nrow(calc_change)-1, i]) /
as.numeric(calc_change[nrow(calc_change)-1, i])) * 100
changed[2,i] <- ((calc_change[nrow(calc_change), i] - calc_change[nrow(calc_change)-5, i]) /
as.numeric(calc_change[nrow(calc_change)-5, i])) * 100
changed[3,i] <- ((calc_change[nrow(calc_change), i] - calc_change[nrow(calc_change)-21, i]) /
as.numeric(calc_change[nrow(calc_change)-21, i])) * 100
changed[4,i] <- ((calc_change[nrow(calc_change), i] - calc_change[nrow(calc_change)-63, i]) /
as.numeric(calc_change[nrow(calc_change)-63, i])) * 100
changed[5,i] <- ((calc_change[nrow(calc_change), i] - calc_change[nrow(calc_change)-126, i]) /
as.numeric(calc_change[nrow(calc_change)-126, i])) * 100
changed[6,i] <- ((calc_change[nrow(calc_change), i] - calc_change[nrow(calc_change)-260, i]) /
as.numeric(calc_change[nrow(calc_change)-260, i])) * 100
}
change <- c("one_day_change", "one_week_change", "one_month_change", "three_month_change", "six_month_change", "one_year_change")
changed <- cbind(change, changed)
# Write email -------------------------------------------------------------
# Define email content
#email_body <- paste0(
#"Hello,
#Here is the list of large or unusual movements of exchange rates:",
# for (var in varlist) {
#  if(highlight_changes$one_day_change > 1) {
#  paste("One day movements:", "\n\n", colnames(var), ":", highlight_change$var[length(highlight_change$var)], "changed by", length(highlight_change$one_day_change), "%")
#   }
#  },
#"Best regards,
#Toph")
# Define email
#email_body <- "hi"
#email <- compose_email(
#body = email_body)
# Send email using Gmail SMTP server
#send_email_out(email_body, "tophgcottle@gmail.com", "tophgcottle@gmail.com", subject = "test", cc = NULL, bcc = NULL,
#              host = "smtp.gmail.com", port = 465, password = "Iamonlyone!79",
##            verbose = FALSE, debug = FALSE)
#
# Save CSV for tomorrow ---------------------------------------------------
write.csv(daily_rates, file = "daily_fx.csv", row.names = FALSE)
# Load libraries and API --------------------------------------------------
rm(list = ls())
library(tidyverse)
library(httr)
library(jsonlite)
library(dplyr)
library(lubridate)
library(blastula)
symbols <- read.csv("/Users/tophcottle/Documents/Personal/mfx_products/currency_symbols.csv")
symbol_string <- paste(symbols$code, collapse = ",")
symbol_string_encoded <- URLencode(symbol_string)
usdurl <- paste0('https://api.exchangerate.host/timeseries?start_date=2019-01-01&end_date=2019-12-31&base=USD&amount=1&source=ecb&symbols=', symbol_string_encoded)
usddata <- as.data.frame(fromJSON(usdurl))
usddata <- usddata %>%
select(-motd.msg, -motd.url, -success, -timeseries, -start_date, -end_date, -base)
data_long <- usddata %>%
pivot_longer(cols = starts_with("rates."),
names_to = c("prefix", "year", "month", "day", "symbol"),
names_pattern = "^(\\w+)\\.(\\d{4})\\.(\\d{2})\\.(\\d{2})\\.(\\w+)$",
values_to = "value") %>%
select(-prefix) %>%
mutate(date = paste(year, month, day, sep = "-")) %>%
select(-year, -month, -day) %>%
pivot_wider(names_from = "symbol", values_from = "value")
for (col in colnames(data_long)) {
new_col <- paste0("USD_", col)
colnames(data_long)[colnames(data_long) == col] <- new_col
}
eururl <- paste0('https://api.exchangerate.host/timeseries?start_date=2019-01-01&end_date=2019-12-31&base=EUR&amount=1&source=ecb&symbols=', symbol_string_encoded)
eurdata <- as.data.frame(fromJSON(eururl))
eurdata <- eurdata %>%
select(-motd.msg, -motd.url, -success, -timeseries, -start_date, -end_date, -base)
data_long_eur <- eurdata %>%
pivot_longer(cols = starts_with("rates."),
names_to = c("prefix", "year", "month", "day", "symbol"),
names_pattern = "^(\\w+)\\.(\\d{4})\\.(\\d{2})\\.(\\d{2})\\.(\\w+)$",
values_to = "value") %>%
select(-prefix) %>%
mutate(date = paste(year, month, day, sep = "-")) %>%
select(-year, -month, -day) %>%
pivot_wider(names_from = "symbol", values_from = "value")
for (col in colnames(data_long_eur)) {
new_col <- paste0("EUR_", col)
colnames(data_long_eur)[colnames(data_long_eur) == col] <- new_col
}
histdata <- bind_cols(data_long, data_long_eur) %>%
select(-USD_USD, -EUR_EUR, -EUR_date) %>%
rename(date = USD_date)
write.csv(histdata, file = "fx_2019.csv", row.names = FALSE)
# Load libraries and API --------------------------------------------------
rm(list = ls())
library(tidyverse)
library(httr)
library(jsonlite)
library(dplyr)
library(lubridate)
library(blastula)
symbols <- read.csv("/Users/tophcottle/Documents/Personal/mfx_products/currency_symbols.csv")
symbol_string <- paste(symbols$code, collapse = ",")
symbol_string_encoded <- URLencode(symbol_string)
usdurl <- paste0('https://api.exchangerate.host/timeseries?start_date=2020-01-01&end_date=2020-12-31&base=USD&amount=1&source=ecb&symbols=', symbol_string_encoded)
usddata <- as.data.frame(fromJSON(usdurl))
usddata <- usddata %>%
select(-motd.msg, -motd.url, -success, -timeseries, -start_date, -end_date, -base)
data_long <- usddata %>%
pivot_longer(cols = starts_with("rates."),
names_to = c("prefix", "year", "month", "day", "symbol"),
names_pattern = "^(\\w+)\\.(\\d{4})\\.(\\d{2})\\.(\\d{2})\\.(\\w+)$",
values_to = "value") %>%
select(-prefix) %>%
mutate(date = paste(year, month, day, sep = "-")) %>%
select(-year, -month, -day) %>%
pivot_wider(names_from = "symbol", values_from = "value")
for (col in colnames(data_long)) {
new_col <- paste0("USD_", col)
colnames(data_long)[colnames(data_long) == col] <- new_col
}
eururl <- paste0('https://api.exchangerate.host/timeseries?start_date=2020-01-01&end_date=2020-12-31&base=EUR&amount=1&source=ecb&symbols=', symbol_string_encoded)
eurdata <- as.data.frame(fromJSON(eururl))
eurdata <- eurdata %>%
select(-motd.msg, -motd.url, -success, -timeseries, -start_date, -end_date, -base)
data_long_eur <- eurdata %>%
pivot_longer(cols = starts_with("rates."),
names_to = c("prefix", "year", "month", "day", "symbol"),
names_pattern = "^(\\w+)\\.(\\d{4})\\.(\\d{2})\\.(\\d{2})\\.(\\w+)$",
values_to = "value") %>%
select(-prefix) %>%
mutate(date = paste(year, month, day, sep = "-")) %>%
select(-year, -month, -day) %>%
pivot_wider(names_from = "symbol", values_from = "value")
for (col in colnames(data_long_eur)) {
new_col <- paste0("EUR_", col)
colnames(data_long_eur)[colnames(data_long_eur) == col] <- new_col
}
histdata <- bind_cols(data_long, data_long_eur) %>%
select(-USD_USD, -EUR_EUR, -EUR_date) %>%
rename(date = USD_date)
write.csv(histdata, file = "fx_2019.csv", row.names = FALSE)
# Load libraries and API --------------------------------------------------
rm(list = ls())
library(tidyverse)
library(httr)
library(jsonlite)
library(dplyr)
library(lubridate)
library(blastula)
symbols <- read.csv("/Users/tophcottle/Documents/Personal/mfx_products/currency_symbols.csv")
symbol_string <- paste(symbols$code, collapse = ",")
symbol_string_encoded <- URLencode(symbol_string)
usdurl <- paste0('https://api.exchangerate.host/timeseries?start_date=2019-01-01&end_date=2019-12-31&base=USD&amount=1&source=ecb&symbols=', symbol_string_encoded)
usddata <- as.data.frame(fromJSON(usdurl))
usddata <- usddata %>%
select(-motd.msg, -motd.url, -success, -timeseries, -start_date, -end_date, -base)
data_long <- usddata %>%
pivot_longer(cols = starts_with("rates."),
names_to = c("prefix", "year", "month", "day", "symbol"),
names_pattern = "^(\\w+)\\.(\\d{4})\\.(\\d{2})\\.(\\d{2})\\.(\\w+)$",
values_to = "value") %>%
select(-prefix) %>%
mutate(date = paste(year, month, day, sep = "-")) %>%
select(-year, -month, -day) %>%
pivot_wider(names_from = "symbol", values_from = "value")
for (col in colnames(data_long)) {
new_col <- paste0("USD_", col)
colnames(data_long)[colnames(data_long) == col] <- new_col
}
eururl <- paste0('https://api.exchangerate.host/timeseries?start_date=2019-01-01&end_date=2019-12-31&base=EUR&amount=1&source=ecb&symbols=', symbol_string_encoded)
eurdata <- as.data.frame(fromJSON(eururl))
eurdata <- eurdata %>%
select(-motd.msg, -motd.url, -success, -timeseries, -start_date, -end_date, -base)
data_long_eur <- eurdata %>%
pivot_longer(cols = starts_with("rates."),
names_to = c("prefix", "year", "month", "day", "symbol"),
names_pattern = "^(\\w+)\\.(\\d{4})\\.(\\d{2})\\.(\\d{2})\\.(\\w+)$",
values_to = "value") %>%
select(-prefix) %>%
mutate(date = paste(year, month, day, sep = "-")) %>%
select(-year, -month, -day) %>%
pivot_wider(names_from = "symbol", values_from = "value")
for (col in colnames(data_long_eur)) {
new_col <- paste0("EUR_", col)
colnames(data_long_eur)[colnames(data_long_eur) == col] <- new_col
}
histdata <- bind_cols(data_long, data_long_eur) %>%
select(-USD_USD, -EUR_EUR, -EUR_date) %>%
rename(date = USD_date)
write.csv(histdata, file = "fx_2019.csv", row.names = FALSE)
# Load libraries and API --------------------------------------------------
rm(list = ls())
library(tidyverse)
library(httr)
library(jsonlite)
library(dplyr)
library(lubridate)
library(blastula)
symbols <- read.csv("/Users/tophcottle/Documents/Personal/mfx_products/currency_symbols.csv")
symbol_string <- paste(symbols$code, collapse = ",")
symbol_string_encoded <- URLencode(symbol_string)
usdurl <- paste0('https://api.exchangerate.host/timeseries?start_date=2020-01-01&end_date=2020-12-31&base=USD&amount=1&source=ecb&symbols=', symbol_string_encoded)
usddata <- as.data.frame(fromJSON(usdurl))
usddata <- usddata %>%
select(-motd.msg, -motd.url, -success, -timeseries, -start_date, -end_date, -base)
data_long <- usddata %>%
pivot_longer(cols = starts_with("rates."),
names_to = c("prefix", "year", "month", "day", "symbol"),
names_pattern = "^(\\w+)\\.(\\d{4})\\.(\\d{2})\\.(\\d{2})\\.(\\w+)$",
values_to = "value") %>%
select(-prefix) %>%
mutate(date = paste(year, month, day, sep = "-")) %>%
select(-year, -month, -day) %>%
pivot_wider(names_from = "symbol", values_from = "value")
for (col in colnames(data_long)) {
new_col <- paste0("USD_", col)
colnames(data_long)[colnames(data_long) == col] <- new_col
}
eururl <- paste0('https://api.exchangerate.host/timeseries?start_date=2020-01-01&end_date=2020-12-31&base=EUR&amount=1&source=ecb&symbols=', symbol_string_encoded)
eurdata <- as.data.frame(fromJSON(eururl))
eurdata <- eurdata %>%
select(-motd.msg, -motd.url, -success, -timeseries, -start_date, -end_date, -base)
data_long_eur <- eurdata %>%
pivot_longer(cols = starts_with("rates."),
names_to = c("prefix", "year", "month", "day", "symbol"),
names_pattern = "^(\\w+)\\.(\\d{4})\\.(\\d{2})\\.(\\d{2})\\.(\\w+)$",
values_to = "value") %>%
select(-prefix) %>%
mutate(date = paste(year, month, day, sep = "-")) %>%
select(-year, -month, -day) %>%
pivot_wider(names_from = "symbol", values_from = "value")
for (col in colnames(data_long_eur)) {
new_col <- paste0("EUR_", col)
colnames(data_long_eur)[colnames(data_long_eur) == col] <- new_col
}
histdata <- bind_cols(data_long, data_long_eur) %>%
select(-USD_USD, -EUR_EUR, -EUR_date) %>%
rename(date = USD_date)
write.csv(histdata, file = "fx_2020.csv", row.names = FALSE)
# Load libraries and API --------------------------------------------------
rm(list = ls())
library(tidyverse)
library(httr)
library(jsonlite)
library(dplyr)
library(lubridate)
library(blastula)
symbols <- read.csv("/Users/tophcottle/Documents/Personal/mfx_products/currency_symbols.csv")
symbol_string <- paste(symbols$code, collapse = ",")
symbol_string_encoded <- URLencode(symbol_string)
usdurl <- paste0('https://api.exchangerate.host/timeseries?start_date=2021-01-01&end_date=2021-12-31&base=USD&amount=1&source=ecb&symbols=', symbol_string_encoded)
usddata <- as.data.frame(fromJSON(usdurl))
usddata <- usddata %>%
select(-motd.msg, -motd.url, -success, -timeseries, -start_date, -end_date, -base)
data_long <- usddata %>%
pivot_longer(cols = starts_with("rates."),
names_to = c("prefix", "year", "month", "day", "symbol"),
names_pattern = "^(\\w+)\\.(\\d{4})\\.(\\d{2})\\.(\\d{2})\\.(\\w+)$",
values_to = "value") %>%
select(-prefix) %>%
mutate(date = paste(year, month, day, sep = "-")) %>%
select(-year, -month, -day) %>%
pivot_wider(names_from = "symbol", values_from = "value")
for (col in colnames(data_long)) {
new_col <- paste0("USD_", col)
colnames(data_long)[colnames(data_long) == col] <- new_col
}
eururl <- paste0('https://api.exchangerate.host/timeseries?start_date=2021-01-01&end_date=2021-12-31&base=EUR&amount=1&source=ecb&symbols=', symbol_string_encoded)
eurdata <- as.data.frame(fromJSON(eururl))
eurdata <- eurdata %>%
select(-motd.msg, -motd.url, -success, -timeseries, -start_date, -end_date, -base)
data_long_eur <- eurdata %>%
pivot_longer(cols = starts_with("rates."),
names_to = c("prefix", "year", "month", "day", "symbol"),
names_pattern = "^(\\w+)\\.(\\d{4})\\.(\\d{2})\\.(\\d{2})\\.(\\w+)$",
values_to = "value") %>%
select(-prefix) %>%
mutate(date = paste(year, month, day, sep = "-")) %>%
select(-year, -month, -day) %>%
pivot_wider(names_from = "symbol", values_from = "value")
for (col in colnames(data_long_eur)) {
new_col <- paste0("EUR_", col)
colnames(data_long_eur)[colnames(data_long_eur) == col] <- new_col
}
histdata <- bind_cols(data_long, data_long_eur) %>%
select(-USD_USD, -EUR_EUR, -EUR_date) %>%
rename(date = USD_date)
write.csv(histdata, file = "fx_2021.csv", row.names = FALSE)
# Load libraries and API --------------------------------------------------
rm(list = ls())
library(tidyverse)
library(httr)
library(jsonlite)
library(dplyr)
library(lubridate)
library(blastula)
symbols <- read.csv("/Users/tophcottle/Documents/Personal/mfx_products/currency_symbols.csv")
symbol_string <- paste(symbols$code, collapse = ",")
symbol_string_encoded <- URLencode(symbol_string)
usdurl <- paste0('https://api.exchangerate.host/timeseries?start_date=2022-01-01&end_date=2022-12-31&base=USD&amount=1&source=ecb&symbols=', symbol_string_encoded)
usddata <- as.data.frame(fromJSON(usdurl))
usddata <- usddata %>%
select(-motd.msg, -motd.url, -success, -timeseries, -start_date, -end_date, -base)
data_long <- usddata %>%
pivot_longer(cols = starts_with("rates."),
names_to = c("prefix", "year", "month", "day", "symbol"),
names_pattern = "^(\\w+)\\.(\\d{4})\\.(\\d{2})\\.(\\d{2})\\.(\\w+)$",
values_to = "value") %>%
select(-prefix) %>%
mutate(date = paste(year, month, day, sep = "-")) %>%
select(-year, -month, -day) %>%
pivot_wider(names_from = "symbol", values_from = "value")
for (col in colnames(data_long)) {
new_col <- paste0("USD_", col)
colnames(data_long)[colnames(data_long) == col] <- new_col
}
eururl <- paste0('https://api.exchangerate.host/timeseries?start_date=2022-01-01&end_date=2022-12-31&base=EUR&amount=1&source=ecb&symbols=', symbol_string_encoded)
eurdata <- as.data.frame(fromJSON(eururl))
eurdata <- eurdata %>%
select(-motd.msg, -motd.url, -success, -timeseries, -start_date, -end_date, -base)
data_long_eur <- eurdata %>%
pivot_longer(cols = starts_with("rates."),
names_to = c("prefix", "year", "month", "day", "symbol"),
names_pattern = "^(\\w+)\\.(\\d{4})\\.(\\d{2})\\.(\\d{2})\\.(\\w+)$",
values_to = "value") %>%
select(-prefix) %>%
mutate(date = paste(year, month, day, sep = "-")) %>%
select(-year, -month, -day) %>%
pivot_wider(names_from = "symbol", values_from = "value")
for (col in colnames(data_long_eur)) {
new_col <- paste0("EUR_", col)
colnames(data_long_eur)[colnames(data_long_eur) == col] <- new_col
}
histdata <- bind_cols(data_long, data_long_eur) %>%
select(-USD_USD, -EUR_EUR, -EUR_date) %>%
rename(date = USD_date)
write.csv(histdata, file = "fx_2022.csv", row.names = FALSE)
# Load libraries and API --------------------------------------------------
rm(list = ls())
library(tidyverse)
library(httr)
library(jsonlite)
library(dplyr)
library(lubridate)
library(blastula)
symbols <- read.csv("/Users/tophcottle/Documents/Personal/mfx_products/currency_symbols.csv")
symbol_string <- paste(symbols$code, collapse = ",")
symbol_string_encoded <- URLencode(symbol_string)
usdurl <- paste0('https://api.exchangerate.host/timeseries?start_date=2023-01-01&end_date=2022-12-31&base=USD&amount=1&source=ecb&symbols=', symbol_string_encoded)
usddata <- as.data.frame(fromJSON(usdurl))
# Load libraries and API --------------------------------------------------
rm(list = ls())
library(tidyverse)
library(httr)
library(jsonlite)
library(dplyr)
library(lubridate)
library(blastula)
symbols <- read.csv("/Users/tophcottle/Documents/Personal/mfx_products/currency_symbols.csv")
symbol_string <- paste(symbols$code, collapse = ",")
symbol_string_encoded <- URLencode(symbol_string)
usdurl <- paste0('https://api.exchangerate.host/timeseries?start_date=2023-01-01&end_date=2023-12-31&base=USD&amount=1&source=ecb&symbols=', symbol_string_encoded)
usddata <- as.data.frame(fromJSON(usdurl))
usdurl <- paste0('https://api.exchangerate.host/timeseries?start_date=2023-01-01&end_date=2023-12-31&base=USD&amount=1&source=ecb&symbols=', symbol_string_encoded)
usddata <- as.data.frame(fromJSON(usdurl))
eururl <- paste0('https://api.exchangerate.host/timeseries?start_date=2023-01-01&end_date=2023-12-31&base=EUR&amount=1&source=ecb&symbols=', symbol_string_encoded)
eurdata <- as.data.frame(fromJSON(eururl))
today_date <- Sys.Date()
# Load libraries and API --------------------------------------------------
rm(list = ls())
library(tidyverse)
library(httr)
library(jsonlite)
library(dplyr)
library(lubridate)
library(blastula)
symbols <- read.csv("/Users/tophcottle/Documents/Personal/mfx_products/currency_symbols.csv")
today_date <- Sys.Date()
symbol_string <- paste(symbols$code, collapse = ",")
symbol_string_encoded <- URLencode(symbol_string)
usdurl <- paste0('https://api.exchangerate.host/timeseries?start_date=2023-01-01&end_date=',today_date,"&base=USD&amount=1&source=ecb&symbols=", symbol_string_encoded)
usddata <- as.data.frame(fromJSON(usdurl))
usddata <- usddata %>%
select(-motd.msg, -motd.url, -success, -timeseries, -start_date, -end_date, -base)
data_long <- usddata %>%
pivot_longer(cols = starts_with("rates."),
names_to = c("prefix", "year", "month", "day", "symbol"),
names_pattern = "^(\\w+)\\.(\\d{4})\\.(\\d{2})\\.(\\d{2})\\.(\\w+)$",
values_to = "value") %>%
select(-prefix) %>%
mutate(date = paste(year, month, day, sep = "-")) %>%
select(-year, -month, -day) %>%
pivot_wider(names_from = "symbol", values_from = "value")
for (col in colnames(data_long)) {
new_col <- paste0("USD_", col)
colnames(data_long)[colnames(data_long) == col] <- new_col
}
eururl <- paste0('https://api.exchangerate.host/timeseries?start_date=2023-01-01&end_date=',today_date,"&base=EUR&amount=1&source=ecb&symbols=", symbol_string_encoded)
eurdata <- as.data.frame(fromJSON(eururl))
eurdata <- eurdata %>%
select(-motd.msg, -motd.url, -success, -timeseries, -start_date, -end_date, -base)
data_long_eur <- eurdata %>%
pivot_longer(cols = starts_with("rates."),
names_to = c("prefix", "year", "month", "day", "symbol"),
names_pattern = "^(\\w+)\\.(\\d{4})\\.(\\d{2})\\.(\\d{2})\\.(\\w+)$",
values_to = "value") %>%
select(-prefix) %>%
mutate(date = paste(year, month, day, sep = "-")) %>%
select(-year, -month, -day) %>%
pivot_wider(names_from = "symbol", values_from = "value")
for (col in colnames(data_long_eur)) {
new_col <- paste0("EUR_", col)
colnames(data_long_eur)[colnames(data_long_eur) == col] <- new_col
}
histdata <- bind_cols(data_long, data_long_eur) %>%
select(-USD_USD, -EUR_EUR, -EUR_date) %>%
rename(date = USD_date)
write.csv(histdata, file = "fx_2023.csv", row.names = FALSE)
View(histdata)
